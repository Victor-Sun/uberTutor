package com.gnomon.common.system.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.struts2.convention.annotation.Namespace;
import org.springframework.beans.factory.annotation.Autowired;
import org.springside.modules.utils.web.struts2.Struts2Utils;

import com.gnomon.common.base.CrudActionSupport;
import com.gnomon.common.page.GTPage;
import com.gnomon.common.system.entity.SysDepartmentEntity;
import com.gnomon.common.system.service.SysDepartmentService;
import com.gnomon.common.utils.JsonResult;
import com.gnomon.common.utils.ObjectConverter;

@Namespace("/sys")
public class SysDepartmentAction extends CrudActionSupport<SysDepartmentEntity> {

	private static final long serialVersionUID = 3137875303793582703L;

	@Autowired
	private SysDepartmentService sysDepartmentService;
	
	private int page;
	private int limit;
	private String filter;
	private String sort;

	private String id;
	
	
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}


	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public int getLimit() {
		return limit;
	}

	public void setLimit(int limit) {
		this.limit = limit;
	}

	public String getFilter() {
		return filter;
	}

	public void setFilter(String filter) {
		this.filter = filter;
	}

	public String getSort() {
		return sort;
	}

	public void setSort(String sort) {
		this.sort = sort;
	}


	private SysDepartmentEntity entity;





	public void getSysDepartmentList() {
		try {
			JsonResult result = new JsonResult();
			List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();
			GTPage<Map<String, Object>> page = sysDepartmentService.getSysDepartmentList(this.getPage(),this.getLimit());
			for(Map<String, Object> map : page.getItems()){
				Map<String, Object> data = new HashMap<String, Object>();
				data.put("id", map.get("ID"));
				data.put("name", map.get("NAME"));
				data.put("ownerName", map.get("OWNER_NAME"));
				data.put("owner", map.get("OWNER"));
				data.put("createDate", ObjectConverter.convert2String(map.get("CREATE_DATE")));
				resultList.add(data);
			}
			

			result.buildSuccessResultForList(resultList,page.getItemCount());
			Struts2Utils.renderJson(result);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	


	@Override
	public String list() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public String input() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public String save() throws Exception {
		try {
			sysDepartmentService.save(entity);
			this.writeSuccessResult(null);
		} catch (Exception e) {
			this.writeErrorResult(e.getMessage());
			e.printStackTrace();
		}
		return null;
	}


	@Override
	public String delete() throws Exception {
		try {
			sysDepartmentService.delete(id);
			this.writeSuccessResult(null);
		} catch (Exception e) {
			this.writeErrorResult(e.getMessage());
			e.printStackTrace();
		}
		return null;
	}


	@Override
	protected void prepareModel() throws Exception {
		if(id == null){
			entity = new SysDepartmentEntity();
			entity.setCreateDate(new Date());
		}else{
			entity = sysDepartmentService.get(id);
		}
		
	}

	@Override
	public SysDepartmentEntity getModel() {
		// TODO Auto-generated method stub
		return entity;
	}
	

	protected void writeSuccessResult(Object data) {

		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("success", true);
		if (null != data) {
			resultMap.put("data", data);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(resultMap);
		try {
			// Struts2Utils.getResponse().getWriter().write(jsonObject.toString());
			Struts2Utils.renderHtml(jsonObject.toString());
		} catch (Exception e) {
			e.printStackTrace();
//			log.error(e);
		}
	}

	protected void writeErrorResult(Object data) {

		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("success", false);
		if (null != data) {
			resultMap.put("data", data);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(resultMap);
		try {
			// Struts2Utils.getResponse().getWriter().write(jsonObject.toString());
			Struts2Utils.renderHtml(jsonObject.toString());
		} catch (Exception e) {
			e.printStackTrace();
//			log.error(e);
		}
	}

	protected void writeErrorResult(final Exception exception) {

		logger.error(exception.getMessage(),exception);

		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("success", false);
		resultMap.put("errors", new HashMap<String, String>() {
			{
				put("reason", exception.getMessage()+"</br></br>");
			}
		});

		JSONObject jsonObject = JSONObject.fromObject(resultMap);
		try {
			Struts2Utils.renderHtml(jsonObject.toString());
//			HttpServletResponse response = Struts2Utils.getResponse();
//            response.setContentType("application/json;charset=UTF-8");
//		    response.setCharacterEncoding("UTF-8");
//		    PrintWriter pw = response.getWriter();
//		    pw.write(jsonObject.toString());
//		    pw.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
