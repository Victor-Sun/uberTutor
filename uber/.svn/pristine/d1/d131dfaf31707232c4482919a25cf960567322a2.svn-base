Ext.define('ExtApp.view.projectManagement.issue.solveissue.NotesController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.notes',
    onButtonClickSubmit: function (button, e, options) {
    	var issueId = button.up('grid').issueId;
    	var grid = button.up('grid');
    	Ext.create('ExtApp.view.projectManagement.issue.solveissue.NotesWindow',{issueId:issueId,grid:grid}).show();
    },
    submitComment: function (button, e, options) {
       var me = this;
       var issueId = button.up('window').issueId;
       var form = this.lookupReference('notesForm');
       if (form.isValid()){
           me.getView().mask('saving... Please wait...');
           form.submit({
               clientValidation: true,
               params:{id:issueId},
               url: '/pdms/pm/project-open-issue!reportIssueProgress.action',
               scope: me,
               success: 'onSubmitSuccess',
               failure: 'onSubmitFailure'
           });
       }
    },
    onSubmitFailure: function(form, action) {

        this.getView().unmask();

        /*var result = Packt.util.Util.decodeJSON(action.response.responseText);

        switch (action.failureType) {
            case Ext.form.action.Action.CLIENT_INVALID:
                Packt.util.Util.showErrorMsg('Form fields may not be submitted with invalid values');
                break;
            case Ext.form.action.Action.CONNECT_FAILURE:
                Packt.util.Util.showErrorMsg(action.response.responseText);
                break;
            case Ext.form.action.Action.SERVER_INVALID:
                Packt.util.Util.showErrorMsg(result.msg);
        }*/

        //alternative to code above - reuse code
        ExtApp.util.Util.handleFormFailure(action);
    },

    onSubmitSuccess: function(form, action) {
        var view = this.getView();
        view.unmask();
        var form = this.lookupReference('notesForm');
        var grid = form.up('window').grid;
        grid.getStore().load({params:{issueId:grid.issueId}});
        form.up('window').close();
    },
	
	renderTitleColumn: function (value, metaData, record) {
        var view = this.getView(),
            plugin = view.getPlugin('rowexpander'),
            tpl = view.titleTpl;

        if (!tpl.isTemplate) {
            view.titleTpl = tpl = new Ext.XTemplate(tpl);
        }

        var data = Ext.Object.chain(record.data);

        // data.expanded = plugin.recordsExpanded[record.internalId] ? ' style="display: none"' : '';

        return tpl.apply(data);
    }
});
