Ext.define('ExtApp.view.main.MainController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.main',

//    listen : {
//        controller : {
//            '#' : {
//                //unmatchedroute : 'onRouteChange'
//            }
//        }
//    },

    routes: {
        ':node': 'onRouteChange'
    },

    lastView: null,

    setCurrentView: function(hashTag) {
        hashTag = (hashTag || '').toLowerCase();

        var me = this,
            refs = me.getReferences(),
            mainCard = refs.mainCardPanel,
            mainLayout = mainCard.getLayout(),
            navigationList = refs.navigationTreeList,
            store = navigationList.getStore(),
            node = store.findNode('routeId', hashTag) ||
                   store.findNode('viewType', hashTag),
            view = (node && node.get('viewType')) || 'page404',
            lastView = me.lastView,
            existingItem = mainCard.child('component[routeId=' + hashTag + ']'),
            newView;

        // Kill any previously routed window
        if (lastView && lastView.isWindow) {
            lastView.destroy();
        }

        //新增加
        if(existingItem){
        	existingItem.destroy();
        }
        
        lastView = mainLayout.getActiveItem();

        if (!existingItem) {
            newView = Ext.create({
                xtype: view,
                routeId: hashTag,  // for existingItem search later
                hideMode: 'offsets'
            });
        }else{
        	newView = Ext.create({
                xtype: view,
                routeId: hashTag,  // for existingItem search later
                hideMode: 'offsets'
            });
        }

        if (!newView || !newView.isWindow) {
            // !newView means we have an existing view, but if the newView isWindow
            // we don't add it to the card layout.
            if (false) {
                // We don't have a newView, so activate the existing view.
                if (existingItem !== lastView) {
                    mainLayout.setActiveItem(existingItem);
                }
                newView = existingItem;
            }
            else {
                // newView is set (did not exist already), so add it and make it the
                // activeItem.
                Ext.suspendLayouts();
                mainLayout.setActiveItem(mainCard.add(newView));
                Ext.resumeLayouts(true);
            }
        }

        navigationList.setSelection(node);

        if (newView.isFocusable(true)) {
            newView.focus();
        }

        me.lastView = newView;
        
        me.controllComponent(node.get('id'));
    },

    // 点击菜单动作
    onNavigationTreeSelectionChange: function (tree, node) {
    	var viewType = node.get('viewType');
    	if (! viewType) {
			return;
		}
    	if (viewType != 'qmsmain' && viewType != 'sysmain') {
    		var to = node && (node.get('routeId') || node.get('viewType'));
	        if (to) {
	            this.redirectTo(to);
	        }
    	} else {
            var userName = Ext.ComponentQuery.query('#userNameItemId')[0].html;
    		this.getView().destroy();
			//Ext.create('ExtApp.view.qualityissuemanagement.main.QmsMain');
    		Ext.create({
    			xtype: viewType
    		});
            var userNameText = Ext.ComponentQuery.query('#userNameItemId')[0];
            userNameText.setText(userName);
    	}
//    	if (viewType != 'sysmain') {
//    		var to = node && (node.get('routeId') || node.get('viewType'));
//	        if (to) {
//	            this.redirectTo(to);
//	        }
//    	} else {
//            var userName = Ext.ComponentQuery.query('#userNameItemId')[0].html;
//    		this.getView().destroy();
//			//Ext.create('ExtApp.view.qualityissuemanagement.main.QmsMain');
//    		Ext.create({
//    			xtype: viewType
//    		});
//            var userNameText = Ext.ComponentQuery.query('#userNameItemId')[0];
//            userNameText.setText(userName);
//    	}
    },

    onToggleNavigationSize: function () {
        var me = this,
            refs = me.getReferences(),
            navigationList = refs.navigationTreeList,
            treepanel = refs.treelistpanel,
            wrapContainer = refs.mainContainerWrap,
            collapsing = !navigationList.getMicro(),
            new_width = collapsing ? 64 : 200;

        if (Ext.isIE9m || !Ext.os.is.Desktop) {
            Ext.suspendLayouts();

            refs.senchaLogo.setWidth(new_width);
            navigationList.setWidth(new_width);
            treepanel.setWidth(new_width);
            navigationList.setMicro(collapsing);

            Ext.resumeLayouts(); // do not flush the layout here...

            // No animation for IE9 or lower...
            wrapContainer.layout.animatePolicy = wrapContainer.layout.animate = null;
            wrapContainer.updateLayout();  // ... since this will flush them
        }
        else {
            if (!collapsing) {
                // If we are leaving micro mode (expanding), we do that first so that the
                // text of the items in the navlist will be revealed by the animation.
                navigationList.setMicro(false);
            }

            // Start this layout first since it does not require a layout
            refs.senchaLogo.animate({dynamic: true, to: {width: new_width}});

            // Directly adjust the width config and then run the main wrap container layout
            // as the root layout (it and its chidren). This will cause the adjusted size to
            // be flushed to the element and animate to that new size.
//            navigationList.width = new_width;
            treepanel.width = new_width;
            wrapContainer.updateLayout({isRoot: true});
            navigationList.el.addCls('nav-tree-animating');

            // We need to switch to micro mode on the navlist *after* the animation (this
            // allows the "sweep" to leave the item text in place until it is no longer
            // visible.
            if (collapsing) {
            	navigationList.setMicro(true);
                navigationList.el.removeCls('nav-tree-animating');
//                navigationList.on({
//                    afterlayoutanimation: function () {
//                        navigationList.setMicro(true);
//                        navigationList.el.removeCls('nav-tree-animating');
//                    },
//                    single: true
//                });
            }
        }
    },

    onMainViewRender:function() {
        //if (!window.location.hash) {
        //    this.redirectTo("admindashboard");
        //}
//    	this.setCurrentView("admindashboard");
    	var me = this; 
    	Ext.getBody().unmask();
    	var task = new Ext.util.DelayedTask(function() {
    		me.redirectTo("admindashboard");
 		});
    	task.delay(3000);
    },  

    onRouteChange:function(id){
        this.setCurrentView(id);
    },

    onSearchRouteChange: function () {
        this.setCurrentView('searchresults');
    },

    onSwitchToModern: function () {
        Ext.Msg.confirm('Switch to Modern', 'Are you sure you want to switch toolkits?',
                        this.onSwitchToModernConfirmed, this);
    },

    onSwitchToModernConfirmed: function (choice) {
        if (choice === 'yes') {
            var s = location.search;

            // Strip "?classic" or "&classic" with optionally more "&foo" tokens
            // following and ensure we don't start with "?".
            s = s.replace(/(^\?|&)classic($|&)/, '').replace(/^\?/, '');

            // Add "?modern&" before the remaining tokens and strip & if there are
            // none.
            location.search = ('?modern&' + s).replace(/&$/, '');
        }
    },

    onEmailRouteChange: function () {
        this.setCurrentView('email');
    },
    
    logout: function(button, e, options) {
    	Ext.Ajax.request({
    		url: '/pdms/main/login!logout.action',
			success: function(response, opts) {
				var result = ExtApp.util.Util.decodeJSON(response.responseText);
				if(result.success){
					button.up('appmain').destroy();
					var href = window.location.href;
					window.location.href = href.substring(0,href.indexOf('#'));
				}else{
					ExtApp.util.Util.showErrorMsg(result.data);
				}
		    },
		    failure: function(response, opts) {
		    	var result = ExtApp.util.Util.decodeJSON(response.responseText); 
		    }
    	});
	},

	//个人设置
	personalSettings: function() {
		Ext.create({
            xtype: 'personalSettings'
        }).show();
	},
	
	controllComponent:function(node){
    	Ext.Ajax.request({
   		    url: '/pdms/role/role!getMenuWidgetList.action',
   		    params:{node:node},
   	        success: function(response, opts) {
   	    	    var result = ExtApp.util.Util.decodeJSON(response.responseText);
   	 		    if (!result){ //#4
	    	 		 result = {};
	    	 		 result.success = false;
	    	 		 result.msg = response.responseText;
   	 		    }
   	 		    for(var i=0;i<result.data.length;i++){
   	 		    	var component = Ext.ComponentQuery.query('#BTN'+result.data[i].id)[0];
	   	 		    if(component){
	   	 		    	component.show();
	   	 		    }
   	 		    }
   	        },
   	        failure: function(response, opts) {
   	    	    var result = ExtApp.util.Util.decodeJSON(response.responseText);           	 		 
   	        }
   	   });
	},
	
	//通知窗口
	notifications: function() {
		var me = this;
		Ext.create({
            xtype: 'nofityWindow',
            parentCaller: me
        }).show();
		//this.dialog.setPosition( 200, 65);
		//this.dialog.show();
	},
	
	information: function() {
		var me = this;
    	Ext.Ajax.request({
    		url:'/pdms/com/report-message!getReportMessage.action',
			scope: me,
			success: function(response, opts) {
				me.view.unmask();
				var obj = Ext.decode(response.responseText);
				if (obj.success) {
					var window = Ext.create({
			            xtype: 'appinfo',
			            version: obj.data.version,
			            contact: obj.data.contact,
			            copyright: obj.data.copyright
			        });
			        window.show();
				} else {
					ExtApp.util.Util.handleRequestFailure(response);
				}
		    },
			failure: function(response, opts) {
				me.view.unmask();
		    	ExtApp.util.Util.handleRequestFailure(response);
		    }
    	})
//		var me = this;
//		var store = Ext.create(
//			'ExtApp.store.common.AppInfoStore');
//	    store.load();
//	    store.on('load', function() {
//	    	me.version = this.getAt(0).data.version;
//		});
//		var window = Ext.create({
//            xtype: 'appinfo'
//        });
//        window.show();
	},
	help:function(){
		window.open('resources/help/manual.htm');
	}
});
