Ext.define('ExtApp.view.projectManagement.issue.raiseissue.RaiseIssueForm',{
	xtype:'raiseIssueForm',
	extend:'Ext.form.Panel',
	reference: 'raiseIssueForm',
	itemId:'raiseIssueFormItemId',
	
	url: '/pdms/pm/project-open-issue!getIssueForm.action',
	
	region: 'center',
	scrollable:'y',
	
	raiseIssueDocuments:null,
	
	initComponent: function() {
		var me = this;
		me.raiseIssueDocuments = Ext.create('ExtApp.view.projectManagement.issue.raiseissue.RaiseIssueDocuments',{issueId:me.issueId});
		me.raiseIssueDocuments.down('grid').getStore().load({params:{issueId:me.issueId}});
		
		// 问题来源
		var issueSourceStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getIssueSourceList.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    },
		    autoLoad: true
		});
		
		// 问题类型
		var issueTypeStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getIssueTypeList.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    },
		    autoLoad: true
		});
		
		// OpenIssue优先级
		var priorityStore = Ext.create('ExtApp.store.common.CodeTableStore');
		priorityStore.getProxy().extraParams = {type: 'ISSUE_PRIORITY'};
		priorityStore.load();
		
		// 登录用户Store
		if (! (me.issueId && me.issueId != null && me.issueId != '')) {
			var loginUserStore = Ext.create(
				'ExtApp.store.common.LoginUserInfoStore');
			loginUserStore.load();
			loginUserStore.on('load', function() {
				me.getForm().findField('raiseByName').setValue(
						this.data.getAt(0).data.userName);
				me.getForm().findField('raiseBy').setValue(
						this.data.getAt(0).data.userId);
				me.getForm().findField('createByName').setValue(
						this.data.getAt(0).data.userName);
				me.getForm().findField('createBy').setValue(
						this.data.getAt(0).data.userId);
				me.getForm().findField('issuePriorityCode').setValue('ISSUE_PRIORITY_2');
			});
		}

		
		// Create the combo box, attached to the states data store
		var issueSource = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '问题来源',
		    flex: 1,
		    store: issueSourceStore,
		    name:'issueSourceId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id'
		});
		
		// 问题类型
		var issueType = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '问题类型',
		    flex: 1,
		    store: issueTypeStore,
		    name:'issueTypeId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id'
		});
		
		var responsibleUserStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getResponsibleUser.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});
		
		// Create the combo box, attached to the states data store
		var responsibleUser = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '责任人',
		    flex: 1,
		    store: responsibleUserStore,
		    name:'respUserId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    forceSelection: true,
		    valueField: 'id'
		});
		
		var responsibleObsStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getResponsibleObsList.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});

		// Create the combo box, attached to the states data store
		var responsibleObs = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '责任组',
		    flex: 1,
		    store: responsibleObsStore,
		    name:'obsId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id',
		    forceSelection: true,
			listeners: {
				change: function(th,newValue, oldValue, eOpts){
					responsibleUserStore.load({params:{obsId:newValue}});
				}
		    }
		});
		
		var vehicleStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getVehicleList4RaiseIssue.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});
		if(me.programId){
			vehicleStore.load({params:{programId:me.programId}});
		}
		
		var readonlyFlag = false;
		var fieldCls = '';
		var vehicleValue = ''
		if (me.programVehicleId && me.programVehicleId != null) {
			readonlyFlag = true;
			fieldCls = 'text-readonly';
			vehicleValue = me.programVehicleId;
			responsibleObsStore.load({params:{programVehicleId:me.programVehicleId}});
		}
		
		// Create the combo box, attached to the states data store
		var vehicle = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '车型',
		    flex: 1,
		    store: vehicleStore,
		    name:'programVehicleId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id',
		    value: vehicleValue,
		    forceSelection: true,
		    readOnly: readonlyFlag,
		    fieldCls: fieldCls,
			listeners: {
				change: function(th, newValue, oldValue, eOpts){
					responsibleObsStore.load({params:{programVehicleId:newValue}});
				}
		    }
		});
		
		var programStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'code'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getProgramList4RaiseIssue.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});
		programStore.load();
		
		var program = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '项目',
		    flex: 1,
		    store: programStore,
		    name:'programId',
		    queryMode: 'local',
		    displayField: 'code',
		    allowBlank:false,
		    valueField: 'id',
		    value:me.programId,
		    forceSelection: true,
			listeners: {
				change: function(th,newValue, oldValue, eOpts){
					if (newValue == null || newValue == '') {
						return;
					}
					vehicleStore.load({params:{programId:newValue}});
				}
		    }
		});
		
		var autoStore = Ext.create('Ext.data.Store', {
			pageSize: 1,
			fields: ['id', 'title','issueDescription','issueCause','issueResolution','userName','updateDate','vehicleName'],
			proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getIssueKB.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});
		
		me.items = [{
			xtype: 'fieldset',
			title: '基本信息',
			margin: 20,
			items: [{
				xtype:'panel',
				layout:{
					type:'vbox',
					align:'stretch'
				},
				defaults: {
					defaults: {
						labelAlign: 'right',
						margin: 5,
						labelWidth: 100
					}
				},
				items:[{
					xtype:'panel',
					layout:{
						type:'hbox',
						align:'stretch'
					},
					items:[{
						xtype: 'combobox',
						flex: 2,
						fieldLabel: '标题',
						store: autoStore,
						name: 'title',
						typeAhead: true,
					    hideTrigger: true,
					    minChars:2,
					    listConfig: {
					    	// Custom rendering template for each item
			                getInnerTpl: function() {
			                    return '<div class="search-item">' +
			                    	'<span class="results-left" style="min-width: 150px;"><h3>{title}</h3>{issueResolution}</span>' +
			                        '<span class="results-right" style="min-width: 150px;">Date: {updateDate}<br />by {userName}</span>' +
			                    '</div>';
			                }
					    },
					    listeners:{
					         'select': function( combo , record , eOpts){
					        	 combo.setValue(record.get('title'));
					        	 me.getForm().findField('issueDescription').setValue(record.get('issueDescription'));
					        	 me.getForm().findField('issueCause').setValue(record.get('issueCause'));
					         }
					    },
					    pageSize: 0
					},{
						xtype: 'textfield',
						flex: 1,
						readOnly: true,
						fieldCls: 'text-readonly',
						fieldLabel: '录入人',
						name: 'createByName',
						allowBlank:false
					},{
						xtype:'hiddenfield',
				        name: 'createBy'
					},{
						xtype: 'sysUserCombo',
						flex: 1,
						fieldLabel: '提出人',
					    name: 'raiseByName',
					    idField: 'raiseBy',
			            allowBlank:false
					},{
						xtype:'hiddenfield',
				        name: 'raiseBy'
					}]
				},{
					xtype:'panel',
					layout:{
						type:'hbox',
						align:'stretch'
					},
					items:[{
				        xtype:'hiddenfield', 
				        name: 'id'
					}, program, vehicle, issueSource, issueType]
				},{
					xtype:'panel',
					layout:{
						type:'hbox',
						align:'stretch'
					},
					items:[{
						xtype:'counterTextArea',
						flex: 1,
						name:'issueDescription',
						letterPadding:'2 0 0 105',
						enforceMaxLength:true,
						maxLength:500,
						fieldLabel:'问题描述'
					}]
				},{
					xtype:'panel',
					layout:{
						type:'hbox',
						align:'stretch'
					},
					items:[responsibleObs,responsibleUser,{
						xtype: 'datefield',
						fieldLabel: '计划完成日期',
						flex: 1,
						name: 'dueDate',
						format: 'Y-m-d',
						minValue:new Date()
					},{
						xtype: 'combobox',
						flex: 1,
						fieldLabel: '优先级',
						store: priorityStore,
					    queryMode: 'local',
					    displayField: 'name',
					    valueField: 'code',
					    name: 'issuePriorityCode',
					    forceSelection: true
					}]
				}]
			}]
		},{
			xtype:'tabpanel',
			defaults:{
				layout:{
					type:'fit'
				}
			},
			flex:1,
			activeTab:0,
			items:[{
				title: '备注',
				xtype: 'container',
				margin: 20,
				items: [{
					xtype:'panel',
					layout:{
						type:'vbox',
						align:'stretch'
					},
					items:[{
						xtype:'counterTextArea',
						flex: 1,
						name:'issueCause',
						enforceMaxLength:true,
						maxLength:500
					}]
				}]
			},me.raiseIssueDocuments]
		}];
		me.callParent(arguments);
	},
	setReadOnly:function(flag){
		var me = this;
	}
});