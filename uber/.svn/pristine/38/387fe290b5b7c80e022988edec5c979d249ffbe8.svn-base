Ext.define('ExtApp.view.projectManagement.issue.archiveissue.ArchiveIssueForm',{
	xtype:'archiveIssueForm',
	extend:'Ext.form.Panel',
	reference: 'archiveIssueForm',
	
	viewModel: {
		data: {
			value: '',
			value2:''
		},
		formulas: {
			count: {
				bind: '{value}',
				get: function(value){
					var counter = 500 - value.length;
					return "（最多500个字符, 还可输入 " + counter + " 个字符）";
				}
			},
			count2: {
				bind: '{value2}',
				get: function(value2){
					var counter = 500 - value2.length;
					return "（最多500个字符, 还可输入  " + counter + " 个字符）";
				}
			},
			count3: {
				bind: '{value3}',
				get: function(value3){
					var counter = 500 - value3.length;
					return "（最多500个字符, 还可输入  " + counter + " 个字符）";
				}
			}
		}
	},
	
	scrollable: true,
	
	itemId:'confirmFormItemId',
	url: '/pdms/pm/project-open-issue!getIssueForm.action',
	initComponent: function() {
		var me = this;
		
		
		var issueSourceStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getIssueSourceList.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    },
		    autoLoad: true
		});
		
		// Create the combo box, attached to the states data store
		var issueSource = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '问题来源',
		    flex: 1,
		    store: issueSourceStore,
		    name:'issueSourceId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id'
		});
		var responsibleUserStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getResponsibleUser.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});
		
		// Create the combo box, attached to the states data store
		var responsibleUser = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '责任人',
		    flex: 1,
		    store: responsibleUserStore,
		    name:'respUserId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id'
		});
		
		var responsibleObsStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getResponsibleObsList.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});
		
		// Create the combo box, attached to the states data store
		var responsibleObs = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '责任组',
		    flex: 1,
		    store: responsibleObsStore,
		    name:'obsId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id',
			listeners: {
				change: function(th,newValue, oldValue, eOpts){
					responsibleUserStore.load({params:{obsId:newValue}});
				}
		    }
		});
		
		var vehicleStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    proxy: {
		    	type: 'ajax',
		    	url: '/pdms/pm/project-open-issue!getVehicleList.action',
		        reader: {
		            type: 'json',
		            rootProperty: 'data'
		        }
		    }
		});
		
		// Create the combo box, attached to the states data store
		var vehicle = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '车型',
		    flex: 1,
		    store: vehicleStore,
		    name:'programVehicleId',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id',
			listeners: {
				change: function(th,newValue, oldValue, eOpts){
					responsibleObsStore.load({params:{programVehicleId:newValue}});
				}
		    }
		});
		
		var programStore = Ext.create('ExtApp.store.projectmanagement.ProjectListNoPagingStore');
		programStore.load();
		var program = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '项目',
		    flex: 1,
		    store: programStore,
		    name:'programId',
		    queryMode: 'local',
		    displayField: 'code',
		    allowBlank:false,
		    valueField: 'id',
			listeners: {
				change: function(th,newValue, oldValue, eOpts){
					vehicleStore.load({params:{programId:newValue}});
				}
		    }
		});
		
		var progressStatusStore = Ext.create('Ext.data.Store', {
		    fields: ['id', 'name'],
		    data: [
		          { id: 'R', name: '红'},
		          { id: 'Y', name: '黄'},
		          { id: 'W', name: '白'}
		      ],
		    autoLoad: true
		});
		
		// Create the combo box, attached to the states data store
		var progressStatus = Ext.create('Ext.form.ComboBox', {
		    fieldLabel: '进度状态',
		    flex: 1,
		    store: progressStatusStore,
		    name:'progressStatus',
		    queryMode: 'local',
		    displayField: 'name',
		    allowBlank:false,
		    valueField: 'id'
		});
		
		me.items = [{
			xtype: 'fieldset',
			title: '归档信息',
			margin: 20,
			items: [{
				xtype:'panel',
				layout:{
					type:'vbox',
					align:'stretch'
				},
				items:[{
			        xtype:'hiddenfield', 
			        name: 'id'
				},{
					xtype: 'textfield',
					fieldLabel: '标题',
					labelWidth: 130,
					name: 'title',
					padding:'10 25 10 30',
					minWidth:250,
					labelAlign: 'top'
				},{
					xtype:'textarea',
					name:'issueDescription',
					padding:'10 25 0 30',
					labelAlign:'top', 
					minWidth:250,
					enforceMaxLength:true,
					maxLength:500,
					bind: '{value}',
					fieldLabel:'问题描述'
				},{
					xtype:'box',
					padding:'0 25 10 30',
					bind: '{count}'
				},{
					xtype:'textarea',
					name:'issueCause',
					padding:'10 25 0 30',
					labelAlign:'top', 
					minWidth:250,
					enforceMaxLength:true,
					maxLength:500,
					bind: '{value2}',
					fieldLabel:'备注'
				},{
					xtype:'box',
					padding:'0 25 10 30',
					bind: '{count2}'
				},{
					xtype:'textarea',
					name:'issueResolution',
					padding:'10 25 0 30',
					labelAlign:'top', 
					minWidth:250,
					enforceMaxLength:true,
					maxLength:500,
					bind: '{value3}',
					fieldLabel:'解决方案'
				},{
					xtype:'box',
					padding:'0 25 10 30',
					bind: '{count3}'
				}]
			}]
		}];
		me.callParent(arguments);
	},
	setReadOnly:function(flag){
		var me = this;
	}
});